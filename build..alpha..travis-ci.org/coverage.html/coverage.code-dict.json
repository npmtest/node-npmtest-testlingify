{"/home/travis/build/npmtest/node-npmtest-testlingify/test.js":"/* istanbul instrument in package npmtest_testlingify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-testlingify/lib.npmtest_testlingify.js":"/* istanbul instrument in package npmtest_testlingify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_testlingify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_testlingify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-testlingify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-testlingify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_testlingify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_testlingify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_testlingify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_testlingify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_testlingify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_testlingify.__dirname + '/lib.npmtest_testlingify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/bin/testlingify.js":"#!/usr/bin/env node\n\n'use strict';\nvar log              =  require('npmlog')\n  , resolveGitRemote =  require('resolve-git-remote')\n  , fs               =  require('fs')\n  , getConfig        =  require('../lib/get-config')\n  , updatePackage    =  require('../lib/update-package')\n  , createHook       =  require('../lib/create-testling-hook')\n  , testHook         =  require('../lib/test-testling-hook')\n  ;\n\nvar task = (function () {\n  var arg = process.argv[2];\n  if (!arg) return 'hook';\n\n  arg = arg.toLowerCase();\n  if (arg === 'test' || arg === 'badge') return arg;\n\n  if (arg === \"-h\" || arg === \"--help\") {\n    console.log(\n      'usage: testlingify            (adds testling hook to github and testling config to package.json)\\n' +\n      '       testlingify test       (tests testling github hook)\\n' +\n      '       testlingify badge      (prints testling badge)');\n\n    process.exit(0);\n  }\n\n  log.error('testlingify', 'unknown task: ' + arg);\n  process.exit(1);\n})();\n\nif (task === 'hook') {\n  log.info('testlingify', 'Adding testling config to your package and creating testling hook on your github repository');\n}\nif (task === 'test') {\n  log.info('testlingify', 'Testing testling hook on your github repository');\n}\n\nresolveGitRemote(function (err, remote) {\n  if (err) {\n    log.error('testlingify', err);\n    log.error('testlingify', 'Sorry, testingify has to be executed from inside a git repository');\n    process.exit(1);\n  }\n  gotRemote(remote);\n});\n\nfunction gotRemote(remote) {\n  var ownerRepo = remote.split('/')\n    , owner = ownerRepo[0]\n    , repo = ownerRepo[1]\n    ;\n\n  if (task === 'badge')\n    return console.log(\n      '[![testling badge](https://ci.testling.com/' + owner + '/' + repo + '.png)]' +\n      '(https://ci.testling.com/' + owner + '/' + repo + ')'\n    );\n\n  getConfig(function (err, config) {\n    if (err) {\n      log.error('testlingify', err);\n      process.exit(1);\n    }\n\n    checkConfig(config);\n    gotRemoteAndConfig(config, owner, repo);\n  });\n}\n\nfunction gotRemoteAndConfig(config, owner, repo) {\n  if (config.github.username !== owner)\n    log.warn('testlingify', 'github username found in config: \"%s\", does not match username of repository: \"%s\"', config.github.username, owner);\n\n  if (task === 'hook')\n    return updatePackage(process.cwd(), config, function (err) { \n      if (err) {\n        log.error('testlingify', 'An error occurred while updating package.json');\n        log.error('testlingify', err);\n        process.exit(1);\n      }\n      createTestlingHook(config, owner, repo);\n    });\n  if (task === 'test')\n    return testTestlingHook(config, owner, repo);\n\n  log.error('testlingify', 'Unknown task: %s. Try \"testlingify\" or \"testlignify test\" or \"testlingify badge\"', task);\n}\n\nfunction createTestlingHook(config, owner, repo) {\n  var gh = config.github;\n  createHook(gh.username, gh.password, owner, repo, function (err, hook) {\n    if (err) {\n      log.error('testlingify', 'Encountered error when testling hook for %s/%s as %s', owner, repo, config.github.username);\n      return log.error('testlingify', err);\n    }\n\n    return hook.created\n      ? log.info('testlingify', 'Successfully created testling hook for %s/%s as %s', owner, repo, config.github.username)\n      : log.warn('testlingify', 'Did not create testling hook for %s/%s as %s because it already exists', owner, repo, config.github.username);\n  });\n}\n\nfunction testTestlingHook(config, owner, repo) {\n  var gh = config.github;\n  testHook(gh.username, gh.password, owner, repo, function (err, hook) {\n    if (err) return log.error('testlingify', err.message);\n    if (hook.sent) return log.info('testlingify', hook.message);\n    log.warn('testlingify', 'Although no error occurred, a post to your testling hook could not be properly sent');\n  });\n}\n\nfunction checkConfig(config) {\n\n  function tellToEditAndExit(problem) {\n    log.error('testlingify', problem);\n    log.error('testlingify', 'Please edit the testlingify config at %s to correct this.', config.location);\n    process.exit(1);\n  }\n\n  if (!config.testling) tellToEditAndExit('testling config missing!');\n}\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/get-config.js":"'use strict';\n\nvar configurate =  require('configurate')\n  , promfig     =  require('promfig')\n  , log         =  require('npmlog')\n  , path        =  require('path');\n\nvar properties = {\n    username  :  'Please enter your username :  '\n  , password  :  'Please enter your password (or access token) :  '\n  , '@secret' :  'password'\n};\n\nfunction edit (config, cb) {\n  // if username and password are already defined promfig calls right back without bothering the user\n  promfig(properties, config.github || {}, function (err, configuredGithub) {\n    if (err) return cb(err);\n\n    config.github = configuredGithub;\n    cb(null, config);\n  });\n}\n\nmodule.exports = function (cb) {\n\n  var configDir     =  path.join(process.env.HOME, '.config')\n    , configFile    =  'testlingify.js'\n    , defaultConfig =  require.resolve('./default-config')\n\n    configurate(\n      { configDir     :  configDir\n      , configFile    :  configFile\n      , defaultConfig :  defaultConfig\n      , edit          :  edit\n      }\n    , function (err, config, configPath) {\n        config.location = configPath;\n        cb(err, config);\n      }\n  )\n  .on('copied-default', function (_, tgt) {\n    log.info('testlingify', 'Initializing your testlingify config at %s', tgt);\n  })\n  .on('loaded-config', function (path, conf) {\n    log.info('testlingify', 'Loaded testlingify config from ', path);\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/update-package.js":"'use strict';\nvar log              =  require('npmlog')\n  , path             =  require('path')\n  , fs               =  require('fs')\n  , findParentDir    =  require('find-parent-dir')\n  , jsonFile         =  require('json-file-plus')\n  ;\n\nexports = module.exports = function (dir, config, cb) {\n  findParentDir(dir, '.git', function (err, dir) {\n    if (err) return cb(err);\n    if (!dir) return cb(new Error('not sure what happened, but I cannot find your repository root'));\n\n    var packageLocation = path.join(dir, 'package.json');\n\n    jsonFile(packageLocation, function (err, file) {\n      if (err) {\n        log.error('testlingify', 'Cannot find a package.json in repository root: ' + dir);\n        return cb(err);\n      }\n\n      var testling = file.get('testling');\n      if (typeof testling === 'object') {\n        log.warn('testlingify', 'Found existing testling config in package.json and am not overwriting it');\n        log.warn('testlingify', 'If you want me to overwrite it, first remove it from the package.json');\n        return cb();\n      }\n\n      file.set({ testling: config.testling });\n\n      file.save(function (err) {\n        if (err) { throw err; }\n        log.info('testlingify', 'Successfully set testling property in package.json.');\n        cb();\n      });\n    });\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/create-testling-hook.js":"'use strict';\n\nvar uris = require('./uris')\n  , request = require('request')\n  , getHook = require('./get-testling-hook');\n\nvar post = module.exports = function (uname, pwd, owner, repo, cb) {\n  var uri = uris.hooks(uname, pwd, owner, repo);\n  getHook(uname, pwd, owner, repo, function (err, hook) {\n    if (err) return cb(err);\n    if (hook) return cb(null, { created: false, message: 'testling hook for ' + uname + '/' + repo + ' already exists' });\n\n    var body = {\n        name   :  'web'\n      , active :  true\n      , events :  [ 'push', 'pull_request' ]\n      , config :  {\n          url          :  uris.testling\n        , content_type :  'form'\n        , insecure_ssl :  '1'\n      }\n    };\n\n    var opts = {\n        uri     :  uri\n      , json    :  true\n      , body    :  body\n      , headers :  { 'user-agent': 'testlingify' }\n    };\n\n    request.post(opts, function (err, res, body) {\n      if (err) return cb(err);\n      if (!/^2\\d\\d$/.test(res.statusCode)) return cb({ err: body, statusCode: res.statusCode });\n      \n      cb(null, { created: true, message: 'testling hook for ' + owner + '/' + repo + ' successfully created' });\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/uris.js":"'use strict';\n\nvar api = exports.api = 'api.github.com';\n\nvar credentials = exports.credentials = function (uname, pwd) {\n  return [uname, pwd].map(encodeURIComponent).join(':');\n};\n\nexports.hooks = function (uname, pwd, owner, repo) {\n  return 'https://' + credentials(uname, pwd) + '@' + api + '/repos/' + owner + '/' + repo + '/hooks';\n};\n\nexports.github = function (owner, repo) {\n  return 'http://github.com/' + owner + '/' + repo;\n};\n\nexports.testling = 'http://git.testling.com';\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/get-testling-hook.js":"'use strict';\n\nvar uris = require('./uris')\n  , request = require('request');\n\nvar get = module.exports = function (uname, pwd, owner, repo, cb) {\n  var uri = uris.hooks(uname, pwd, owner, repo);\n  \n  var opts = {\n      uri: uri\n    , json: true\n    , body: { }\n    , headers: { 'user-agent': 'testlingify' }\n    };\n\n  request.get(opts, function (err, res, body) {\n    if (err) return cb(err);\n    if (res.statusCode !== 200) return cb(body);\n    if (!Array.isArray(body)) return cb('expecting array response, but got: ' + JSON.stringify(body));\n\n    var testlingHook = body\n      .filter(function (x) {\n        var c = x.config;\n        return c && c.url === 'http://git.testling.com';\n      })[0];\n\n    cb(null, testlingHook);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/test-testling-hook.js":"'use strict';\n\nvar uris = require('./uris')\n  , request = require('request')\n  , getHook = require('./get-testling-hook');\n\nvar test = module.exports = function (uname, pwd, owner, repo, cb) {\n  var uri = uris.hooks(uname, pwd, owner, repo);\n\n  getHook(uname, pwd, owner, repo, function (err, hook) {\n    if (err) return cb(err);\n    if (!hook) return cb(new Error('No hook found for ' + owner + '/' + repo));\n\n    var opts = {\n        uri: uri + '/' + hook.id + '/tests'\n      , body: ''\n      , headers: { 'user-agent': 'testlingify' }\n      };\n\n    request.post(opts, function (err, res, body) {\n      if (err) return cb({ err: err });\n      if (!/^2\\d\\d$/.test(res.statusCode)) return cb({ err: body, statusCode: res.statusCode });\n\n      cb(null, { sent: true, message: 'Successfully pushed to testling hook for ' + owner + '/' + repo });\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/default-config.js":"module.exports = {\n    github: {\n        username: undefined    // please provide your github username here\n      , password: undefined    // please provide your github password here (same you use to log into github)\n    }\n  , testling: {\n      files: 'test/*.js'\n      , browsers: [\n          'ie/8..latest'\n        , 'firefox/17..latest'\n        , 'firefox/nightly'\n        , 'chrome/22..latest'\n        , 'chrome/canary'\n        , 'opera/12..latest'\n        , 'opera/next'\n        , 'safari/5.1..latest'\n        , 'ipad/6.0..latest'\n        , 'iphone/6.0..latest'\n      ]\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-testlingify/node_modules/testlingify/lib/delete-testling-hook.js":"'use strict';\n\nvar uris = require('./uris')\n  , request = require('request')\n  , getHook = require('./get-testling-hook');\n\nvar post = module.exports = function (uname, pwd, owner, repo, cb) {\n  var uri = uris.hooks(uname, pwd, owner, repo);\n  getHook(uname, pwd, owner, repo, function (err, hook) {\n    if (err) return cb(err);\n    if (!hook) return cb(null, { created: false, message: 'testling hook for ' +  owner + '/' + repo + ' does not exist' });\n    \n    var opts = {\n        uri     :  uri + '/' + hook.id\n      , json    :  true\n      , body    :  ''\n      , headers :  { 'user-agent': 'testlingify' }\n    };\n\n    request.del(opts, function (err, res, body) {\n      if (err) return cb(err);\n      if (!/^2\\d\\d$/.test(res.statusCode)) return cb({ err: body, statusCode: res.statusCode });\n      \n      cb(null, { deleted: true, message: 'testling hook for ' + owner + '/' + repo + ' successfully deleted' });\n    });\n  });\n};\n"}